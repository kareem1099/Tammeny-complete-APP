Tamenny App - Installation Guide

Tamenny is a comprehensive healthcare mobile application built with Flutter. It connects users with healthcare services, medical information, and a supportive community.

---

Project Overview

Tamenny aims to improve healthcare accessibility by providing a platform where users can:
- Access medical information and latest news
- Connect with nearby doctors
- Scan and analyze health conditions
- Interact with an AI-powered medical chatbot
- Participate in a health-focused community

Before You Begin

Make sure you have the following versions installed:
- Flutter SDK: 3.5.4
- Dart SDK: (Compatible with Flutter 3.5.4)
- Android Studio: (Recommended latest stable version)
- Xcode: (If building for iOS)
- Firebase & Supabase projects properly set up

NOTE: Run a simple "Hello World" app in Flutter to ensure your environment is correctly configured.

---

Installation Steps

1. Clone the Repository

git clone https://github.com/kareem1099/Tammeny-complete-APP
cd tamenny_app

2. Install Dependencies

flutter pub get

3. Run the Project

Make sure you have a connected device or emulator, then run:

flutter run

Minimum Versions

- Android: API Level 21+
- iOS: Version 12+

---
Configuration Steps
---

Firebase Setup

Make sure your Firebase project is configured correctly. Add the following files:
- android/app/google-services.json
- ios/Runner/GoogleService-Info.plist
Enable Authentication, Firestore, and Messaging.

---
Supabase Setup

Configure Supabase for Storage and additional backend functionality. Add your Supabase URL and keys in the secure config file.

---

For Application Title

Android:
Path: android/app/src/main/AndroidManifest.xml

android:label="Tamenny"

iOS:
Open the General tab in Xcode and update Display Name to Tamenny

---

For Theme Customization

Path: lib/core/theme/app_theme.dart

static const Color primaryColor = Color(***********);
static const Color accentColor = Color(***********);

---

Project Structure

lib/
- config/                 App configuration
- core/                   Core functionality
  - cubits/             Global state management
  - functions/          Utility functions
  - routes/             Navigation routes
  - services/           App-wide services
- features/               App features
  - auth/               Authentication
  - chatbot/            AI medical assistant
  - community/          Social features
  - home/               Main dashboard
  - map/                Doctor location
  - onboarding/         User onboarding
  - profiel/            User profile
  - scan/               Health scanning
  - splash/             App startup
- generated/              Generated files (localization)

---

Localization

Tamenny supports multiple languages via flutter_localizations.

---

Theming

Includes support for both Light and Dark themes.

---

Build APK

To generate a release APK for Android:

1. Run the following command:

flutter build apk --release

2. The APK file will be located at:

build/app/outputs/flutter-apk/app-release.apk

You can share or distribute this APK for manual installation on Android devices.

---
Connecting the Backend with the Data
---

To connect the Tamenny app with your backend services (Firebase and Supabase), follow these integration guidelines:

Firebase Integration

1. Authentication
- In your Firebase console, enable desired sign-in providers (Email/Password, Google, etc.)
- In your app, use `firebase_auth` package to handle user registration, login, and logout.

2. Firestore Database
- Structure your Firestore collections according to your appâ€™s needs (e.g., users, scans, posts).
- Use the `cloud_firestore` package to read/write data.
- Example: To fetch user data:
```dart
FirebaseFirestore.instance.collection('users').doc(userId).get();

---

Supabase Integration

1. Storage (Scan Uploads)
- Store scan images and user avatars using Supabase Storage buckets.
- Use supabase_flutter package to upload/download files:
```dart
supabase.storage.from('scans').upload('path/to/file.png', file);
supabase.storage.from('avatars').upload('path/to/avatar.jpg', avatarFile);

2. Environment Configuration
- Store Supabase URL and API Key securely (e.g., `lib/config/constants.dart`):
```dart
const String supabaseUrl = 'https://yourproject.supabase.co';
const String supabaseKey = 'your-api-key';
---

Tip: Keep services organized under `lib/core/services/` to maintain clean architecture.  
Example: `firebase_service.dart`, `supabase_service.dart`

Additional Notes

- Make sure all API keys and endpoints are correctly configured before building production APKs.
- Backend data must match the expected schema for scanning and chatbot results.

Developed with love for better healthcare accessibility.
